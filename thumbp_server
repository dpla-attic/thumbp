#!/usr/bin/env python

"""
Run the application with the Gevent WSGI server.
"""

import sys
import os
import argparse
import signal
import logging
from logging.handlers import TimedRotatingFileHandler
from thumbp import thumbp
from gevent.pywsgi import WSGIServer


port = 8080
interface = '127.0.0.1'
pidfile = None

def main(argv):
    global port, interface, pidfile

    parser = argparse.ArgumentParser(
        description="Run the application in a Gevent WSGI server",
        epilog="WSGI server messages are sent to stderr.")
    parser.add_argument("-d", "--debug",
                        help="turn on debugging",
                        action="store_true")
    parser.add_argument("-e", "--elasticsearch_url",
                        help="Elasticsearch URL with path to index",
                        required=True)
    parser.add_argument("-l", "--applog",
                        help="Full path & filename of application log file",
                        required=True)
    parser.add_argument("-f", "--pidfile",
                        help="Full path to pidfile",
                        required=True)
    parser.add_argument("-i", "--interface",
                        help="Network interface on which to listen")
    parser.add_argument("-p", "--port",
                        type=int,
                        help="Port on which to listen")
    args = parser.parse_args()

    pidfile = args.pidfile
    with open(pidfile, 'w') as f:
        f.write(str(os.getpid()))

    file_handler = TimedRotatingFileHandler(args.applog, when='midnight')
    file_handler.setFormatter(logging.Formatter(
        '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'))

    thumbp.app.logger.addHandler(file_handler)
    if args.debug:
        print("Debugging output is on.", file=sys.stderr)
        thumbp.app.logger.setLevel(logging.DEBUG)
    else:
        thumbp.app.logger.setLevel(logging.INFO)

    thumbp.es_base = args.elasticsearch_url

    if args.interface:
        interface = args.interface

    if args.port:
        port = args.port

    signal.signal(signal.SIGTERM, shutdown_handler)
    signal.signal(signal.SIGINT, shutdown_handler)

    http_server = WSGIServer((interface, port), application=thumbp.app)
    try:
        http_server.serve_forever()
    except:
        clean_pidfile()
        sys.exit()  # Don't print backtrace for KeyboardInterrupt

def clean_pidfile():
    try:
        os.unlink(pidfile)
    except:
        pass

def shutdown_handler(signum, frame):
    clean_pidfile()
    sys.exit()

if __name__ == '__main__':
    main(sys.argv[1:])
